// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/rectcircle/go-dependency-injection-learn/bean/sample"
	"io"
	"os"
)

// Injectors from wire.go:

// 1. 简单例子
func InitializeSample(aField string, bField int) *sample.C {
	a := sample.NewA(aField)
	b := sample.NewB(bField)
	c := sample.NewC(a, b)
	return c
}

// 2. 使用 sampleSet
func InitializeSample2(aField string, bField int, c bool) *sample.C {
	a := sample.NewA(aField)
	b := sample.NewB(bField)
	sampleC := sample.NewC(a, b)
	return sampleC
}

// 3. 接口和结构体绑定
func InitializeWithInterfaceBind() string {
	myFooer := newMyFooer()
	string2 := newBar(myFooer)
	return string2
}

// 4. 结构体 Provider
func InitializeStructProvider() FooBar2 {
	foo2 := newFoo2()
	fooBar2 := FooBar2{
		MyFoo2: foo2,
	}
	return fooBar2
}

func InitializeStructProvider2() *FooBar2 {
	foo2 := newFoo2()
	bar2 := newBar2()
	fooBar2 := &FooBar2{
		MyFoo2: foo2,
		MyBar2: bar2,
	}
	return fooBar2
}

// 5. 绑定值
func InitializeValue1() Foo3 {
	foo3 := _wireFoo3Value
	return foo3
}

var (
	_wireFoo3Value = Foo3{X: 42}
)

func InitializeValue2() io.Reader {
	reader := _wireFileValue
	return reader
}

var (
	_wireFileValue = os.Stdin
)

// 6. 结构体字段 Provider
func InitializeStructField() string {
	foo4 := NewFoo4()
	string2 := foo4.S
	return string2
}

// 7. 返回错误
func InitializeTestError(isErr bool) (string, error) {
	string2, err := newStringOrError(isErr)
	if err != nil {
		return "", err
	}
	return string2, nil
}

// 8. Cleanup
func InitializeTestCleanup(isErr bool) (string, func(), error) {
	string2, cleanup, err := newStringOrCleanup(isErr)
	if err != nil {
		return "", nil, err
	}
	return string2, func() {
		cleanup()
	}, nil
}

// 9. 循环依赖
func InitializeTestCircularDependencySet(isErr bool) (string, func(), error) {
	string2, cleanup, err := newStringOrCleanup(isErr)
	if err != nil {
		return "", nil, err
	}
	return string2, func() {
		cleanup()
	}, nil
}

// wire.go:

//不能声明在 Injector 里面
var sampleSet = wire.NewSet(sample.NewA, sample.NewB, sample.NewC)
